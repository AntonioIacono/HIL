import requests
import base64

def encode_to_base64(file_path):
    with open(file_path, 'rb') as file:
        file_content = file.read()
        encoded_content = base64.b64encode(file_content).decode()
        
        return encoded_content

def decode_base64_to_docx(encoded_content, output_file):
    print(encoded_content)
    # Decode the Base64-encoded content
    decoded_bytes = base64.b64decode(encoded_content)
    
    # Write the decoded content to a DOCX file
    with open(output_file, 'wb') as docx_file:
        docx_file.write(decoded_bytes)


def send_encoded_file_to_server(url, encoded_content):

    payload = {'data': encoded_content } #
    headers = {'Content-Type': 'application/octet-stream'}
    try:
        response = requests.post(url, data=encoded_content, headers=headers)
        
        print(response.status_code)
        print(response.text)
    except requests.exceptions.RequestException as e:
        print("404")

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 3:
        print("Usage: python3 wordrequest.py example.docx http://10.10.11.2:8080/")
    else:
# Example usage:
        url = sys.argv[2] #Replace with the actual URL of the server
        file_path = sys.argv[1]  # Replace with the path to the example.docx file
        encoded_content = encode_to_base64(file_path)
        #decode_base64_to_docx(encoded_content,"text.docx")
        send_encoded_file_to_server(url, encoded_content)
